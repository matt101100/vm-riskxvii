!! Function 1: translates mi files into readable format !!

void translate_mi(uint32_t instruction) {
    uint8_t opcode = get_opcode(instruction);
    int label = determine_instruction_label(opcode, instruction);
    uint32_t immediate;
    uint8_t source[2];

    if (label == add) {
        printf("I = add, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, R, source);
        immediate = extract_immediate_number(instruction, R);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == addi) {
        printf("I = addi, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, I, source);
        immediate = extract_immediate_number(instruction, I);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == sub) {
        printf("I = sub, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, R, source);
        immediate = extract_immediate_number(instruction, R);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == lui) {
        printf("I = lui, ");
        uint8_t target = get_target_register(instruction);
        immediate = extract_immediate_number(instruction, U);
        printf("rd = r%d, ", target);
    } else if (label == xor) {
        printf("I = xor, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, R, source);
        immediate = extract_immediate_number(instruction, R);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == xori) {
        printf("I = xori, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, I, source);
        immediate = extract_immediate_number(instruction, I);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == or) {
        printf("I = or, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, R, source);
        immediate = extract_immediate_number(instruction, R);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == ori) {
        printf("I = ori, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, I, source);
        immediate = extract_immediate_number(instruction, I);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == and) {
        printf("I = and, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, R, source);
        immediate = extract_immediate_number(instruction, R);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == andi) {
        printf("I = andi, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, I, source);
        immediate = extract_immediate_number(instruction, I);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == sll) {
        printf("I = sll, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, R, source);
        immediate = extract_immediate_number(instruction, R);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == srl) {
        printf("I = srl, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, R, source);
        immediate = extract_immediate_number(instruction, R);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == sra) {
        printf("I = sra, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, R, source);
        immediate = extract_immediate_number(instruction, R);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == lb) {
        printf("I = lb, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, I, source);
        immediate = extract_immediate_number(instruction, I);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == lh) {
        printf("I = lh, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, I, source);
        immediate = extract_immediate_number(instruction, I);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == lw) {
        printf("I = lw, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, I, source);
        immediate = extract_immediate_number(instruction, I);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == lbu) {
        printf("I = lbu, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, I, source);
        immediate = extract_immediate_number(instruction, I);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == lhu) {
        printf("I = lhu, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, I, source);
        immediate = extract_immediate_number(instruction, I);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == sb) {
        printf("I = sb, ");
        get_source_registers(instruction, S, source);
        immediate = extract_immediate_number(instruction, S);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == sh) {
        printf("I = sh, ");
        get_source_registers(instruction, S, source);
        immediate = extract_immediate_number(instruction, S);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == sw) {
        printf("I = sw, ");
        get_source_registers(instruction, S, source);
        immediate = extract_immediate_number(instruction, S);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == slt) {
        printf("I = slt, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, R, source);
        immediate = extract_immediate_number(instruction, R);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == slti) {
        printf("I = slti, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, I, source);
        immediate = extract_immediate_number(instruction, I);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == sltu) {
        printf("I = sltu, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, R, source);
        immediate = extract_immediate_number(instruction, R);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == sltiu) {
        printf("I = sltiu, ");
        uint8_t target = get_target_register(instruction);
        get_source_registers(instruction, I, source);
        immediate = extract_immediate_number(instruction, I);
        printf("rd = r%d, ", target);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == beq) {
        printf("I = beq, ");
        get_source_registers(instruction, SB, source);
        immediate = extract_immediate_number(instruction, SB);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == bne) {
        printf("I = bne, ");
        get_source_registers(instruction, SB, source);
        immediate = extract_immediate_number(instruction, SB);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == blt) {
        printf("I = blt, ");
        get_source_registers(instruction, SB, source);
        immediate = extract_immediate_number(instruction, SB);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == bltu) {
        printf("I = bltu, ");
        get_source_registers(instruction, SB, source);
        immediate = extract_immediate_number(instruction, SB);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == bge) {
        printf("I = bge, ");
        get_source_registers(instruction, SB, source);
        immediate = extract_immediate_number(instruction, SB);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == bgeu) {
        printf("I = bgeu, ");
        immediate = extract_immediate_number(instruction, SB);
        for (int i = 0; i < 1; i++) {
            if (source[i] < 0) {
                continue;
            }
            printf("rs%d = r%d, ", i + 1, source[i]);
        }
    } else if (label == jal) {
        printf("I = jal, ");
        uint8_t target = get_target_register(instruction);
        immediate = extract_immediate_number(instruction, UJ);
        printf("rd = r%d, ", target);
    } else if (label == jalr) {
        printf("I = jalr, ");
        uint8_t target = get_target_register(instruction);
        immediate = extract_immediate_number(instruction, I);
        printf("rd = r%d, ", target);
    }
    printf("imm = %d\n", immediate);

}

!! Snippet 2: prints values of registers, pc, memory !!

     // printf("pc: %d\n", (vm.pc));
        // for (int i = 0; i < NUM_REGISTERS; i++) {
        //     if (vm.registers[i] == 0) {
        //         continue;
        //     }
        //     printf("reg %d = %d\n", i, vm.registers[i]);
        // }
        // printf("\n");
        // for (int i = 0; i < MEMORY_SIZE; i++) {
        //     if (vm.memory[i] == 0) {
        //         continue;
        //     }
        //     printf("data_mem at addr: %0x, val = %d\n", (i * 8), vm.memory[i]);
        // }

!! Snippet 3: calls the translate function and skips any actual execution !!

        // translate_mi(instruction);
        // vm.pc+=4;
        // continue;